package com.Object.InnerClass;

public class statement {
    /*
         Java中还有一种内部类技术，简单说就是在一个类的内部定义一个类。内部类看起来很简单，
         但是当你深入其中，你会发现它是极其复杂的。
         事实上Java应用程序开发过程中内部类使用的地方不是很多，一般在图形用户界面开发中用于事件处理。
        提示：内部类技术虽然使程序结构变得紧凑，但是却在一定程度上破坏了Java面向对象思想

        Java语言中允许在一个类（或方法、代码块）的内部定义另一个类，
        后者称为“内部类”（InnerClasses），也称为“嵌套类”（Nested Classes），封装它的类称为“外部类”。
        内部类与外部类之间存在逻辑上的隶属关系，内部类一般只用在封装它的外部类或代码块中使用。

        内部类的作用如下：
            01. 封装。将不想公开的实现细节封装到一个内部类中，内部类可以声明为私有的，只能在所在外部类中访问。
            02. 提供命名空间。静态内部类和外部类能够提供有别于包的命名空间。
            03. 便于访问外部类成员。内部类能够很方便访问所在外部类的成员，包括私有成员也能访问。

        内部类的分类：
            按照内部类在定义的时候是否给它一个类名，可以分为：有名内部类和匿名内部类。
            有名内部类又按照作用域不同可以分为：局部内部类和成员内部类，
            成员内部类又分为：实例内部类和静态内部类。
                         内部类
                            |
                            |是否给它一个类名
                            |
                    ----------------
                    |              |
                有名内部类       匿名内部类
                    |
                    |作用域不同
                    |
            ----------------
            |              |
        局部内部类       成员内部类
                          |
                -----------------
                |               |
            实例成员内部类     静态成员内部类
    */

    // 一个简单例子
    static int a = 10;
    public void test() {
        inner i = new inner();
        System.out.println(i.same(a));
    }
    class inner {
        int same(int input) {
            return input;
        }
    }
}
